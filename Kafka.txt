What ever we have in our life is data.
eg> laptop, wife, home, car, kids etc.,

Collection of raw facts is called data




  
zookeeper-server-start.bat ..\..\config\zookeeper.properties
kafka-server-start.bat ..\..\config\server.properties
kafka-topics --zookeeper 192.168.99.100:2181 --create --topic first_topic --partitions 3 --replication-factor 1
kafka-console-producer --broker-list 127.0.0.1:9092 --topic first_topic
kafka-console-consumer --bootstrap-server 127.0.0.1:9092 --topic first_topic

kafka-console-consumer --bootstrap-server localhost:9092 --topic first_topic --group mygroup

kafka-console-producer --brooker-list 127.0.0.1:9092, 127.0.0.2:9093, 127.0.0.3:9094 --topic first_topic
kafka-console-consumer --bootstrap-server 127.0.0.1:9092, 127.0.0.2:9093, 127.0.0.3:9094 --topic first_topic

kafka-topics --zookeeper 127.0.0.1:2181 --topic first-topic --describe

kafka-consumer-groups --bootstrap-server 127.0.0.1:9092 -describe --group mygroup
kafka-consumer-groups --bootstrap-server localhost:9092 --group  mygroup --reset-offsets --to-earliest --execute --topic first_topic

kafka-consumer-groups --bootstrap-server localhost:9092 --group  mygroup --reset-offsets --shift-by -2  --execute --topic first_topic

Kafka-consumer-groups â€“bootstrap-server localhost:9092 --group mygroup --reset-offsets --shift-by -2 --execute --topic first_topic

kafka-consumer-groups.sh  --bootstrap-server localhost:9092 --group mygroup --reset-offsets --shift-by -2 --execute --topic first-topic:0

kafka-topics --alter --zookeeper localhost:2181 --topic first_topic --partitions 5




import org.apache.kafka.clients.producer.*;
import org.apache.kafka.common.serialization.StringSerializer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Properties;
import java.util.concurrent.ExecutionException;

public class ProducerDemoKeys {
public static void main(String[] args) throws ExecutionException, InterruptedException {

        final Logger logger = LoggerFactory.getLogger(ProducerDemoKeys.class);

        String bootstrapServers = "127.0.0.1:9092";

        // create Producer properties
        Properties properties = new Properties();
        properties.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);
        properties.setProperty(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());
        properties.setProperty(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());

        // create the producer
        KafkaProducer<String, String> producer = new KafkaProducer<String, String>(properties);
		for (int i=0; i<10; i++ ) {
            // create a producer record

            String topic = "first_topic";
            String value = "hello world " + Integer.toString(i);
            String key = "id_" + Integer.toString(i);

            ProducerRecord<String, String> record =
                    new ProducerRecord<String, String>(topic, key, value);

            logger.info("Key: " + key); // log the key
			producer.send(record, new Callback() {
                public void onCompletion(RecordMetadata recordMetadata, Exception e) {
                    // executes every time a record is successfully sent or an exception is thrown
                    if (e == null) {
                        // the record was successfully sent
                        logger.info("Received new metadata. \n" +
                                "Topic:" + recordMetadata.topic() + "\n" +
                                "Partition: " + recordMetadata.partition() + "\n" +
                                "Offset: " + recordMetadata.offset() + "\n" +
                                "Timestamp: " + recordMetadata.timestamp());
                    } else {
                        logger.error("Error while producing", e);
                    }
                }
            }).get();      
        }
		// flush data
        producer.flush();
        // flush and close producer
        producer.close();

    }
}

